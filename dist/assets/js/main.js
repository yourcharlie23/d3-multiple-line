function drawGraph(){xScale.domain(d3.extent(data,function(t){return t[xLabel]})),yScale.domain([d3.min(concentrations,function(t){return d3.min(t.datapoints,function(t){return t.concentration})}),d3.max(concentrations,function(t){return d3.max(t.datapoints,function(t){return t.concentration})})]),svg.append("g").attr("class","x axis").attr("transform","translate(0,"+height+")").call(xAxis).selectAll("text").attr("y",10),svg.append("g").attr("class","y axis").transition().duration(500).call(yAxis).on("end",function(){d3.select(this).append("text").attr("class","label").attr("y",-10).attr("fill","#333333").style("text-anchor","end").text("Production")}),svg.selectAll(".y.axis text").attr("dy",-4),tooltipLine=svg.append("line"),tipBox=svg.append("rect").attr("width",width).attr("height",height).attr("opacity",0).on("mousemove",drawTooltip).on("mouseout",removeTooltip);(categoryLine=svg.selectAll(".category").data(concentrations).enter().append("g").attr("class","category")).append("path").attr("class","line").attr("d",function(t){return line(t.datapoints)}).attr("stroke-width","2px").attr("fill","none").attr("stroke",function(t){return color(t.category)}).on("mouseover",function(t){d3.select(this).style("stroke-width","3px")}).on("mousemove",drawTooltip).on("mouseout",function(){d3.select(this).style("stroke-width","2px")}).each(function(t){t.totalLength=this.getTotalLength()}).attr("stroke-dasharray",function(t){return t.totalLength+" "+t.totalLength}).attr("stroke-dashoffset",function(t){return t.totalLength}).transition().duration(500).attr("stroke-dashoffset",0),categoryLine.append("g").selectAll("circle").data(function(t){return t.datapoints}).enter().append("circle").attr("class",function(t){return"circle-"+t.date}).attr("r",2).attr("cx",function(t){return xScale(t.date)}).attr("cy",function(t){return yScale(t.concentration)}).attr("fill",function(t){return color(t.category)}).style("stroke",function(t){return color(t.category)}).style("display","none")}function resize(){var t=.83*parseInt(d3.select(".chart-info").style("width"));d3.selectAll("#chart").transition().style("width",t).duration(100).delay(200).on("end",adjust)}function adjust(){width=parseInt(d3.select("#chart").style("width"))-margin.left-margin.right,height=parseInt(d3.select("#chart").style("height"))-margin.top-margin.bottom,xScale.range([0,width]),yScale.range([height,0]),yAxis.tickSize(-width,0,0),svg.select(".x.axis").attr("transform","translate(0,"+height+")").call(xAxis),svg.select(".y.axis").call(yAxis),svg.selectAll(".line").attr("d",function(t){return line(t.datapoints)}),svg.selectAll("circle").attr("cx",function(t){return xScale(t.date)}).attr("cy",function(t){return yScale(t.concentration)}),svg.selectAll("rect").attr("width",width).attr("height",height),xAxis.ticks(Math.floor(Math.max(width/65,4))),yAxis.ticks(Math.floor(Math.max(height/30,4)))}var categories,xLabel,data,categoryLine,tipBox,concentrations,tooltipLine,margin={top:20,right:20,bottom:30,left:50},width=parseInt(d3.select("#chart").style("width"))-margin.left-margin.right,height=parseInt(d3.select("#chart").style("height"))-margin.top-margin.bottom,yMax=28e3,xScale=d3.scaleLinear().range([0,width]),yScale=d3.scaleLinear().range([height,0]),color=d3.scaleOrdinal().range(["#FABE9C","#F6AB9A","#FED47D"]),xAxis=d3.axisBottom(xScale).tickFormat(d3.format("d")),yAxis=d3.axisLeft(yScale).tickSize(width).tickSize(-width,0,0),line=d3.line().curve(d3.curveBasis).x(function(t){return xScale(t.date)}).y(function(t){return yScale(t.concentration)}),totalHeight=height+margin.top+margin.bottom,svg=d3.select("#chart").style("width",width+margin.left+margin.right).style("height",totalHeight).append("g").attr("transform","translate("+margin.left+","+margin.top+")"),tooltip=d3.select("#tooltip"),removeTooltip=function(){tooltip&&tooltip.style("display","none"),tooltipLine&&tooltipLine.attr("stroke","none"),d3.selectAll("circle").style("display","none")},drawTooltip=function(){var t=xScale.invert(d3.mouse(tipBox.node())[0]),e=Math.floor(t),a={};concentrations.forEach(function(t){var n=_.find(t.datapoints,{date:""+e});n&&(a[t.category]=n)}),d3.selectAll("circle").style("display","none"),d3.selectAll(".circle-"+e).style("display","block");var n=parseInt(d3.select(".chart-info").style("height"))-height-margin.top-margin.bottom+d3.mouse(this)[1];tooltipLine.attr("stroke","#bdbdbd").attr("x1",xScale(e)).attr("x2",xScale(e)).attr("y1",0).attr("y2",height),tooltip.html("<div>"+e+"</div>").style("display","block").style("font-weight","bold").style("left",d3.mouse(tipBox.node())[0]+margin.left+margin.right+"px").style("top",n+"px"),tooltip.append("ul").attr("class","legends-list"),_.each(a,function(t,e){if(!t.isDisabled){var a="<div class='title inline-b'>"+e+"</div> <div class='desc inline-b'>"+t.concentration+"</div>";tooltip.select("ul").append("li").attr("class","col-4").style("color",function(t){return color(e)}).html(a)}})},sortCategoryLegend=function(){categories.map(function(t,e){legends.append("li").attr("class","col-4 "+(t.isDisabled?"exclude":"")).style("color",function(e){return color(t.name)}).html("<span class='default-color'>"+t.name+"</span>").on("click",function(e){t.isDisabled=!t.isDisabled,categories=_.sortBy(categories,[function(t){return t.isDisabled}]),legends.html(""),sortCategoryLegend(),concentrations=categories.map(function(t,e){if(!t.isDisabled)return{category:t.name,datapoints:data.map(function(e){return{date:e[xLabel],concentration:+e[t.name]}})}}),concentrations=_.compact(concentrations),svg.html(""),drawGraph()})})},legends=d3.select("#legends ul");d3.csv("./assets/data/milledRiceEndingStocks.csv",function(t,e){if(t)throw t;data=e,xLabel=d3.keys(data[0])[0],categories=d3.keys(data[0]).slice(1),color.domain(categories),concentrations=categories.map(function(t,e){return categories[e]={name:t,isDisabled:!1},legends.html(""),sortCategoryLegend(),{category:t,datapoints:data.map(function(e){return{date:e[xLabel],concentration:+e[t]}})}}),drawGraph()}),d3.select(window).on("resize",resize),adjust();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9qcy9tYWluLmpzIl0sIm5hbWVzIjpbImRyYXdHcmFwaCIsInhTY2FsZSIsImRvbWFpbiIsImQzIiwiZXh0ZW50IiwiZGF0YSIsImQiLCJ4TGFiZWwiLCJ5U2NhbGUiLCJtaW4iLCJjb25jZW50cmF0aW9ucyIsImMiLCJkYXRhcG9pbnRzIiwidiIsImNvbmNlbnRyYXRpb24iLCJtYXgiLCJzdmciLCJhcHBlbmQiLCJhdHRyIiwiY2FsbCIsInhBeGlzIiwic2VsZWN0QWxsIiwidHJhbnNpdGlvbiIsImR1cmF0aW9uIiwieUF4aXMiLCJvbiIsInNlbGVjdCIsInRoaXMiLCJzdHlsZSIsInRleHQiLCJ0b29sdGlwTGluZSIsInRpcEJveCIsIndpZHRoIiwiaGVpZ2h0IiwiZHJhd1Rvb2x0aXAiLCJyZW1vdmVUb29sdGlwIiwiY2F0ZWdvcnlMaW5lIiwiZW50ZXIiLCJsaW5lIiwiY29sb3IiLCJjYXRlZ29yeSIsImVhY2giLCJ0b3RhbExlbmd0aCIsImdldFRvdGFsTGVuZ3RoIiwiZGQiLCJkYXRlIiwicmVzaXplIiwiY2hhcnRDb250YWluZXJXaWR0aCIsInBhcnNlSW50IiwiZGVsYXkiLCJhZGp1c3QiLCJtYXJnaW4iLCJsZWZ0IiwicmlnaHQiLCJ0b3AiLCJib3R0b20iLCJyYW5nZSIsInRpY2tTaXplIiwidGlja3MiLCJNYXRoIiwiZmxvb3IiLCJjYXRlZ29yaWVzIiwieU1heCIsInNjYWxlTGluZWFyIiwic2NhbGVPcmRpbmFsIiwiYXhpc0JvdHRvbSIsInRpY2tGb3JtYXQiLCJmb3JtYXQiLCJheGlzTGVmdCIsImN1cnZlIiwiY3VydmVCYXNpcyIsIngiLCJ5IiwidG90YWxIZWlnaHQiLCJ0b29sdGlwIiwieDAiLCJpbnZlcnQiLCJtb3VzZSIsIm5vZGUiLCJ4RGF0YSIsImhvdmVyQWxsRGF0YSIsImZvckVhY2giLCJpdGVtIiwiY2F0RGF0YSIsIl8iLCJmaW5kIiwieUNvb3IiLCJodG1sIiwiaW5kZXgiLCJpc0Rpc2FibGVkIiwibGlIdG1sIiwic29ydENhdGVnb3J5TGVnZW5kIiwibWFwIiwibGVnZW5kcyIsIm5hbWUiLCJzb3J0QnkiLCJvIiwiY29tcGFjdCIsImNzdiIsImVycm9yIiwiY3N2ZGF0YSIsImtleXMiLCJzbGljZSIsIndpbmRvdyJdLCJtYXBwaW5ncyI6IkFBZ0tBLFNBQVNBLFlBRVBDLE9BQU9DLE9BQU9DLEdBQUdDLE9BQU9DLEtBQU0sU0FBU0MsR0FBSyxPQUFPQSxFQUFFQyxXQUNyREMsT0FBT04sUUFDTEMsR0FBR00sSUFBSUMsZUFBZ0IsU0FBU0MsR0FBSyxPQUFPUixHQUFHTSxJQUFJRSxFQUFFQyxXQUFZLFNBQVNDLEdBQUssT0FBT0EsRUFBRUMsa0JBQ3hGWCxHQUFHWSxJQUFJTCxlQUFnQixTQUFTQyxHQUFLLE9BQU9SLEdBQUdZLElBQUlKLEVBQUVDLFdBQVksU0FBU0MsR0FBSyxPQUFPQSxFQUFFQyxvQkFJMUZFLElBQUlDLE9BQU8sS0FDTkMsS0FBSyxRQUFTLFVBQ2RBLEtBQUssWUFBYSxlQUFpQixPQUFXLEtBQzlDQyxLQUFLQyxPQUNMQyxVQUFVLFFBQ1ZILEtBQUssSUFBSyxJQUlmRixJQUFJQyxPQUFPLEtBQ05DLEtBQUssUUFBUyxVQUNkSSxhQUFhQyxTQUFTLEtBQ3RCSixLQUFLSyxPQUNMQyxHQUFHLE1BQU8sV0FDVHRCLEdBQUd1QixPQUFPQyxNQUFNVixPQUFPLFFBQ3RCQyxLQUFLLFFBQVMsU0FDZEEsS0FBSyxLQUFNLElBR1hBLEtBQUssT0FBUSxXQUNiVSxNQUFNLGNBQWUsT0FDckJDLEtBQUssZ0JBSVpiLElBQUlLLFVBQVUsZ0JBQWdCSCxLQUFLLE1BQU8sR0FHMUNZLFlBQWNkLElBQUlDLE9BQU8sUUFHekJjLE9BQVNmLElBQUlDLE9BQU8sUUFDZkMsS0FBSyxRQUFTYyxPQUNkZCxLQUFLLFNBQVVlLFFBQ2ZmLEtBQUssVUFBVyxHQUNoQk8sR0FBRyxZQUFhUyxhQUNoQlQsR0FBRyxXQUFZVSxnQkFJcEJDLGFBQWVwQixJQUFJSyxVQUFVLGFBQ3hCaEIsS0FBS0ssZ0JBQ0wyQixRQUFR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RixHQUN4RCxPQUFRdUMsS0FBTXZDLEVBQUVDLFFBQVNPLGVBQWdCUixFQUFFa0MsU0FJL0N4QyxjQXlKRkcsR0FBR3VCLE9BQU82RSxRQUFROUUsR0FBRyxTQUFXcUIsUUFHaENJIiwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBEZWZpbmUgbWFyZ2lucyBcbnZhciBtYXJnaW4gPSB7dG9wOiAyMCwgcmlnaHQ6IDIwLCBib3R0b206IDMwLCBsZWZ0OiA1MH0sXG53aWR0aCA9IHBhcnNlSW50KGQzLnNlbGVjdCgnI2NoYXJ0Jykuc3R5bGUoJ3dpZHRoJykpIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQsXG5oZWlnaHQgPSBwYXJzZUludChkMy5zZWxlY3QoJyNjaGFydCcpLnN0eWxlKCdoZWlnaHQnKSkgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcblxudmFyIHlNYXggPSAyODAwMDtcblxuLy8gRGVmaW5lIHNjYWxlc1xudmFyIHhTY2FsZSA9IGQzLnNjYWxlTGluZWFyKCkucmFuZ2UoWzAsIHdpZHRoXSk7XG52YXIgeVNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKS5yYW5nZShbaGVpZ2h0LCAwXSk7XG52YXIgY29sb3IgPSBkMy5zY2FsZU9yZGluYWwoKVxuICAgICAgLnJhbmdlKFsnI0ZBQkU5QycsICcjRjZBQjlBJywgJyNGRUQ0N0QnXSk7XG5cbnZhciBjYXRlZ29yaWVzLCB4TGFiZWwsIGRhdGE7XG5cbi8vIERlZmluZSBheGVzXG52YXIgeEF4aXMgPSBkMy5heGlzQm90dG9tKHhTY2FsZSkudGlja0Zvcm1hdChkMy5mb3JtYXQoJ2QnKSk7XG52YXIgeUF4aXMgPSBkMy5heGlzTGVmdCh5U2NhbGUpLnRpY2tTaXplKHdpZHRoKS50aWNrU2l6ZSgtd2lkdGgsIDAsIDApO1xuXG4vLyBEZWZpbmUgbGluZXNcbnZhciBsaW5lID0gZDMubGluZSgpLmN1cnZlKGQzLmN1cnZlQmFzaXMpXG4gICAgICAgICAgICAueChmdW5jdGlvbihkKSB7IHJldHVybiB4U2NhbGUoZFsnZGF0ZSddKTsgfSlcbiAgICAgICAgICAgIC55KGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHlTY2FsZShkWydjb25jZW50cmF0aW9uJ10pOyB9KTtcblxuLy8gRGVmaW5lIHN2ZyBjYW52YXNcbnZhciB0b3RhbEhlaWdodCA9IGhlaWdodCArIG1hcmdpbi50b3AgKyBtYXJnaW4uYm90dG9tO1xudmFyIGNhdGVnb3J5TGluZSwgdGlwQm94LCBjb25jZW50cmF0aW9ucztcbnZhciBzdmcgPSBkMy5zZWxlY3QoJyNjaGFydCcpXG4gICAgICAgICAgICAuc3R5bGUoJ3dpZHRoJywgd2lkdGggKyBtYXJnaW4ubGVmdCArIG1hcmdpbi5yaWdodClcbiAgICAgICAgICAgIC5zdHlsZSgnaGVpZ2h0JywgdG90YWxIZWlnaHQpXG4gICAgICAgICAgICAuYXBwZW5kKCdnJylcbiAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBtYXJnaW4ubGVmdCArICcsJyArIG1hcmdpbi50b3AgKyAnKScpO1xuXG52YXIgdG9vbHRpcCA9IGQzLnNlbGVjdCgnI3Rvb2x0aXAnKTtcbnZhciB0b29sdGlwTGluZTtcblxudmFyIHJlbW92ZVRvb2x0aXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRvb2x0aXApIHRvb2x0aXAuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgIGlmICh0b29sdGlwTGluZSkgdG9vbHRpcExpbmUuYXR0cignc3Ryb2tlJywgJ25vbmUnKTtcbiAgICBkMy5zZWxlY3RBbGwoJ2NpcmNsZScpLnN0eWxlKCdkaXNwbGF5JywgJ25vbmUnKTtcbn1cblxudmFyIGRyYXdUb29sdGlwID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB4MCA9IHhTY2FsZS5pbnZlcnQoZDMubW91c2UodGlwQm94Lm5vZGUoKSlbMF0pLFxuICAgIHhEYXRhID0gTWF0aC5mbG9vcih4MCksXG4gICAgaG92ZXJBbGxEYXRhID0ge307XG5cbiAgICAvLyBHZXQgYWxsIHJlbGF0ZWQgZGF0YVxuICAgIGNvbmNlbnRyYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjYXREYXRhID0gXy5maW5kKGl0ZW0uZGF0YXBvaW50cywgeyAnZGF0ZSc6ICcnK3hEYXRhIH0pXG4gICAgICBpZiAoY2F0RGF0YSkge1xuICAgICAgICBob3ZlckFsbERhdGFbaXRlbS5jYXRlZ29yeV0gPSBjYXREYXRhO1xuICAgICAgfVxuICAgIH0pXG5cbiAgICAvLyBIaWRlL3Nob3cgY2lyY2xlXG4gICAgZDMuc2VsZWN0QWxsKCdjaXJjbGUnKS5zdHlsZSgnZGlzcGxheScsICdub25lJyk7XG4gICAgZDMuc2VsZWN0QWxsKCcuY2lyY2xlLScreERhdGEpLnN0eWxlKCdkaXNwbGF5JywgJ2Jsb2NrJyk7XG4gICAgXG4gICAgLy8gUGxhY2luZyBvZiB0b29sdGlwICBcbiAgICB2YXIgeUNvb3IgPSAocGFyc2VJbnQoZDMuc2VsZWN0KCcuY2hhcnQtaW5mbycpLnN0eWxlKCdoZWlnaHQnKSkgLSBoZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbSkgKyBkMy5tb3VzZSh0aGlzKVsxXVxuICAgIFxuICAgIC8vIFJlcG9zaXRpb24gbGluZVxuICAgIHRvb2x0aXBMaW5lLmF0dHIoJ3N0cm9rZScsICcjYmRiZGJkJylcbiAgICAgIC5hdHRyKCd4MScsIHhTY2FsZSh4RGF0YSkpXG4gICAgICAuYXR0cigneDInLCB4U2NhbGUoeERhdGEpKVxuICAgICAgLmF0dHIoJ3kxJywgMClcbiAgICAgIC5hdHRyKCd5MicsIGhlaWdodCk7XG4gICAgXG4gICAgLy8gRGlzcGxheSBpbmZvXG4gICAgdG9vbHRpcC5odG1sKFwiPGRpdj5cIit4RGF0YStcIjwvZGl2PlwiKVxuICAgICAgLnN0eWxlKCdkaXNwbGF5JywgJ2Jsb2NrJylcbiAgICAgIC5zdHlsZSgnZm9udC13ZWlnaHQnLCAnYm9sZCcpXG4gICAgICAuc3R5bGUoJ2xlZnQnLCAoZDMubW91c2UodGlwQm94Lm5vZGUoKSlbMF0gKyBtYXJnaW4ubGVmdCArIG1hcmdpbi5yaWdodCkgKyAncHgnKVxuICAgICAgLnN0eWxlKCd0b3AnLCB5Q29vciArICdweCcpO1xuXG4gICAgLy8gQWRkIGNsYXNzIHNhbWUgYXMgdGhlIGxlZ2VuZHNcbiAgICB0b29sdGlwLmFwcGVuZCgndWwnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ2xlZ2VuZHMtbGlzdCcpO1xuXG4gICAgLy8gRGlzcGxheSBob3ZlciBkYXRhXG4gICAgXy5lYWNoKGhvdmVyQWxsRGF0YSwgZnVuY3Rpb24oY2F0ZWdvcnksIGluZGV4KSB7XG4gICAgICBpZiAoIWNhdGVnb3J5LmlzRGlzYWJsZWQpIHtcbiAgICAgICAgdmFyIGxpSHRtbCA9IFwiPGRpdiBjbGFzcz0ndGl0bGUgaW5saW5lLWInPlwiK1xuICAgICAgICAgICAgaW5kZXgrXCI8L2Rpdj4gPGRpdiBjbGFzcz0nZGVzYyBpbmxpbmUtYic+XCIrY2F0ZWdvcnkuY29uY2VudHJhdGlvbitcIjwvZGl2PlwiXG4gICAgICAgIHZhciBsaSA9IHRvb2x0aXAuc2VsZWN0KCd1bCcpLmFwcGVuZCgnbGknKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdjb2wtNCcpXG4gICAgICAgICAgLnN0eWxlKCdjb2xvcicsIGZ1bmN0aW9uKGQpIHtyZXR1cm4gY29sb3IoaW5kZXgpOyB9KTtcbiAgICAgICAgXG4gICAgICAgIGxpLmh0bWwobGlIdG1sKTsgXG4gICAgICB9XG4gICAgfSlcblxufVxuXG4vLyBTb3J0IGNhdGVnb3J5IGxlZ2VuZCBhbmQgcmVjYWxjdWxhdGUgZGF0YSBhZ2FpbiBmb3IgdGhlIHNob3duIGxlZ2VuZHNcbnZhciBzb3J0Q2F0ZWdvcnlMZWdlbmQgPSBmdW5jdGlvbiAoKSB7XG4gIGNhdGVnb3JpZXMubWFwKGZ1bmN0aW9uKGNhdGVnb3J5LCBpbmRleCl7XG4gICAgLy8gRHJhdyBsZWdlbmQgbGlzdFxuICAgIHZhciBsaSA9IGxlZ2VuZHMuYXBwZW5kKCdsaScpXG4gICAgICAuYXR0cignY2xhc3MnLCAnY29sLTQgJyArIChjYXRlZ29yeS5pc0Rpc2FibGVkID8gJ2V4Y2x1ZGUnIDogJycpKVxuICAgICAgLnN0eWxlKCdjb2xvcicsIGZ1bmN0aW9uKGQpIHtyZXR1cm4gY29sb3IoY2F0ZWdvcnkubmFtZSk7IH0pXG4gICAgICAuaHRtbChcIjxzcGFuIGNsYXNzPSdkZWZhdWx0LWNvbG9yJz5cIitjYXRlZ29yeS5uYW1lK1wiPC9zcGFuPlwiKVxuICAgICAgLm9uKCdjbGljaycsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgY2F0ZWdvcnkuaXNEaXNhYmxlZCA9ICFjYXRlZ29yeS5pc0Rpc2FibGVkO1xuICAgICAgICBjYXRlZ29yaWVzID0gXy5zb3J0QnkoY2F0ZWdvcmllcywgW2Z1bmN0aW9uKG8pIHsgcmV0dXJuIG8uaXNEaXNhYmxlZDsgfV0pO1xuICAgICAgICBsZWdlbmRzLmh0bWwoJycpO1xuICAgICAgICBzb3J0Q2F0ZWdvcnlMZWdlbmQoKTtcblxuICAgICAgICAvLyBSZWRyYXcgZ3JhcGggc2luY2UgYSBjYXRlZ29yeSBpcyBkaXNhYmxlZFxuICAgICAgICBjb25jZW50cmF0aW9ucyA9IGNhdGVnb3JpZXMubWFwKGZ1bmN0aW9uKGNhdGVnb3J5LCBpbmRleCl7XG4gICAgICAgICAgaWYgKCFjYXRlZ29yeS5pc0Rpc2FibGVkKSB7XG4gICAgICAgICAgICByZXR1cm4ge2NhdGVnb3J5OiBjYXRlZ29yeS5uYW1lLCBkYXRhcG9pbnRzOiBkYXRhLm1hcChmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgcmV0dXJuIHtkYXRlOiBkW3hMYWJlbF0sIGNvbmNlbnRyYXRpb246ICtkW2NhdGVnb3J5Lm5hbWVdfVxuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAvLyBSZW1vdmUgZmFsc3kgdmFsdWVzIG9mIGxlZ2VuZHNcbiAgICAgICAgY29uY2VudHJhdGlvbnMgPSBfLmNvbXBhY3QoY29uY2VudHJhdGlvbnMpO1xuICAgICAgICBzdmcuaHRtbCgnJyk7XG5cbiAgICAgICAgZHJhd0dyYXBoKCk7XG5cbiAgICAgIH0pO1xuICB9KVxufVxuXG52YXIgbGVnZW5kcyA9IGQzLnNlbGVjdCgnI2xlZ2VuZHMgdWwnKTtcblxuLy8gUmVhZCBpbiBkYXRhXG5kMy5jc3YoJy4vYXNzZXRzL2RhdGEvbWlsbGVkUmljZUVuZGluZ1N0b2Nrcy5jc3YnLCBmdW5jdGlvbihlcnJvciwgY3N2ZGF0YSl7XG4gIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG4gIGRhdGEgPSBjc3ZkYXRhO1xuXG4gIC8vIEdldCB0aGUgZmlyc3Qga2V5IG5hbWUgZm9yIHkgYXhpc1xuICB4TGFiZWwgPSBkMy5rZXlzKGRhdGFbMF0pWzBdO1xuXG4gIC8vIFNldCB0aGUgY29sb3IgZG9tYWluIGVxdWFsIHRvIHRoZSB0aHJlZSBjYXRlZ29yaWVzXG4gIGNhdGVnb3JpZXMgPSBkMy5rZXlzKGRhdGFbMF0pLnNsaWNlKDEpXG4gIGNvbG9yLmRvbWFpbihjYXRlZ29yaWVzKTtcblxuICAvLyBSZWZvcm1hdCBkYXRhIHRvIG1ha2UgaXQgbW9yZSBjb3Bhc2V0aWMgZm9yIGQzXG4gIC8vIGRhdGEgPSBBbiBhcnJheSBvZiBvYmplY3RzXG4gIC8vIGNvbmNlbnRyYXRpb25zID0gQW4gYXJyYXkgb2YgdGhyZWUgb2JqZWN0cywgZWFjaCBvZiB3aGljaCBjb250YWlucyBhbiBhcnJheSBvZiBvYmplY3RzXG4gIC8vIFNldCB0aGUgbGVnZW5kc1xuICBjb25jZW50cmF0aW9ucyA9IGNhdGVnb3JpZXMubWFwKGZ1bmN0aW9uKGNhdGVnb3J5LCBpbmRleCl7XG4gICAgY2F0ZWdvcmllc1tpbmRleF0gPSB7IG5hbWU6IGNhdGVnb3J5LCBpc0Rpc2FibGVkOiBmYWxzZX1cbiAgICBsZWdlbmRzLmh0bWwoJycpO1xuICAgIHNvcnRDYXRlZ29yeUxlZ2VuZCgpO1xuXG4gICAgcmV0dXJuIHtjYXRlZ29yeTogY2F0ZWdvcnksIGRhdGFwb2ludHM6IGRhdGEubWFwKGZ1bmN0aW9uKGQpe1xuICAgICAgcmV0dXJuIHtkYXRlOiBkW3hMYWJlbF0sIGNvbmNlbnRyYXRpb246ICtkW2NhdGVnb3J5XX1cbiAgICB9KX1cbiAgfSlcblxuICBkcmF3R3JhcGgoKTtcblxufSk7XG5cbmZ1bmN0aW9uIGRyYXdHcmFwaCAoKSB7XG4gIC8vIFNldCB0aGUgZG9tYWluIG9mIHRoZSBheGVzXG4gIHhTY2FsZS5kb21haW4oZDMuZXh0ZW50KGRhdGEsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGRbeExhYmVsXTsgfSkpO1xuICB5U2NhbGUuZG9tYWluKFtcbiAgICBkMy5taW4oY29uY2VudHJhdGlvbnMsIGZ1bmN0aW9uKGMpIHsgcmV0dXJuIGQzLm1pbihjLmRhdGFwb2ludHMsIGZ1bmN0aW9uKHYpIHsgcmV0dXJuIHYuY29uY2VudHJhdGlvbjsgfSk7IH0pLFxuICAgIGQzLm1heChjb25jZW50cmF0aW9ucywgZnVuY3Rpb24oYykgeyByZXR1cm4gZDMubWF4KGMuZGF0YXBvaW50cywgZnVuY3Rpb24odikgeyByZXR1cm4gdi5jb25jZW50cmF0aW9uOyB9KTsgfSlcbiAgXSk7XG5cbiAgLy8gUGxhY2UgdGhlIGF4ZXMgb24gdGhlIGNoYXJ0XG4gIHN2Zy5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3ggYXhpcycpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgwLCcgKyAoaGVpZ2h0KSArICcpJylcbiAgICAgIC5jYWxsKHhBeGlzKVxuICAgICAgLnNlbGVjdEFsbCgndGV4dCcpXG4gICAgICAuYXR0cigneScsIDEwKTtcbiAgICAgIC8vIC5hdHRyKCd4JywgNilcbiAgICAgIC8vIC5zdHlsZSgndGV4dC1hbmNob3InLCAnc3RhcnQnKTtcblxuICBzdmcuYXBwZW5kKCdnJylcbiAgICAgIC5hdHRyKCdjbGFzcycsICd5IGF4aXMnKVxuICAgICAgLnRyYW5zaXRpb24oKS5kdXJhdGlvbig1MDApXG4gICAgICAuY2FsbCh5QXhpcylcbiAgICAgIC5vbignZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAuYXR0cignY2xhc3MnLCAnbGFiZWwnKVxuICAgICAgICAuYXR0cigneScsIC0xMClcbiAgICAgICAgLy8gLmF0dHIoJ2R5JywgJy43MWVtJylcbiAgICAgICAgLy8gLmF0dHIoJ2R4JywgJy0xZW0nKVxuICAgICAgICAuYXR0cignZmlsbCcsICcjMzMzMzMzJylcbiAgICAgICAgLnN0eWxlKCd0ZXh0LWFuY2hvcicsICdlbmQnKVxuICAgICAgICAudGV4dCgnUHJvZHVjdGlvbicpO1xuICAgICAgfSk7ICBcblxuICAvLyBSZWFsaWduIHkgdGlja3NcbiAgc3ZnLnNlbGVjdEFsbCgnLnkuYXhpcyB0ZXh0JykuYXR0cignZHknLCAtNCk7XG5cbiAgLy8gRHJhdyB0b29sdGlwIHZlcnRpY2FsIGxpbmUgaW4gaG92ZXJcbiAgdG9vbHRpcExpbmUgPSBzdmcuYXBwZW5kKCdsaW5lJyk7XG5cbiAgLy8gRHJhdyB0b29saXAgYm94XG4gIHRpcEJveCA9IHN2Zy5hcHBlbmQoJ3JlY3QnKVxuICAgICAgLmF0dHIoJ3dpZHRoJywgd2lkdGgpXG4gICAgICAuYXR0cignaGVpZ2h0JywgaGVpZ2h0KVxuICAgICAgLmF0dHIoJ29wYWNpdHknLCAwKVxuICAgICAgLm9uKCdtb3VzZW1vdmUnLCBkcmF3VG9vbHRpcClcbiAgICAgIC5vbignbW91c2VvdXQnLCByZW1vdmVUb29sdGlwKTtcblxuXG4gIC8vIERyYXcgdGhlIGdyYXBoXG4gIGNhdGVnb3J5TGluZSA9IHN2Zy5zZWxlY3RBbGwoJy5jYXRlZ29yeScpXG4gICAgICAuZGF0YShjb25jZW50cmF0aW9ucylcbiAgICAgIC5lbnRlcigpLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cignY2xhc3MnLCAnY2F0ZWdvcnknKTtcbiAgXG4gIC8vIERyYXcgZWFjaCBwYXRoXG4gIHZhciBjYXRQYXRoID0gY2F0ZWdvcnlMaW5lLmFwcGVuZCgncGF0aCcpXG4gICAgICAuYXR0cignY2xhc3MnLCAnbGluZScpXG4gICAgICAuYXR0cignZCcsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGxpbmUoZC5kYXRhcG9pbnRzKTsgfSlcbiAgICAgIC5hdHRyKCdzdHJva2Utd2lkdGgnLCAnMnB4JylcbiAgICAgIC5hdHRyKCdmaWxsJywgJ25vbmUnKVxuICAgICAgLmF0dHIoJ3N0cm9rZScsIGZ1bmN0aW9uKGQpIHtyZXR1cm4gY29sb3IoZC5jYXRlZ29yeSk7IH0pXG4gICAgICAub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKGQpIHsgXG4gICAgICAgIC8vIG9uIG1vdXNlIGluIHNob3cgbGluZSwgY2lyY2xlcyBhbmQgdGV4dFxuICAgICAgICBkMy5zZWxlY3QodGhpcykuc3R5bGUoJ3N0cm9rZS13aWR0aCcsICczcHgnKTtcbiAgICAgIH0pXG4gICAgICAub24oJ21vdXNlbW92ZScsIGRyYXdUb29sdGlwKVxuICAgICAgLm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uKCkgeyBcbiAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnN0eWxlKCdzdHJva2Utd2lkdGgnLCAnMnB4Jyk7XG4gICAgICB9KTtcblxuICAvLyBBbmltYXRlIHBhdGhcbiAgY2F0UGF0aC5lYWNoKGZ1bmN0aW9uKGQpIHsgZC50b3RhbExlbmd0aCA9IHRoaXMuZ2V0VG90YWxMZW5ndGgoKTsgfSlcbiAgICAgIC5hdHRyKFwic3Ryb2tlLWRhc2hhcnJheVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnRvdGFsTGVuZ3RoICsgXCIgXCIgKyBkLnRvdGFsTGVuZ3RoOyB9KVxuICAgICAgLmF0dHIoXCJzdHJva2UtZGFzaG9mZnNldFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnRvdGFsTGVuZ3RoOyB9KVxuICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgLmR1cmF0aW9uKDUwMClcbiAgICAgIC5hdHRyKFwic3Ryb2tlLWRhc2hvZmZzZXRcIiwgMCk7XG5cbiAgLy8gRHJhdyBqb2ludCBsaW5lIGNpcmxjZVxuICBjYXRlZ29yeUxpbmUuYXBwZW5kKCdnJykuc2VsZWN0QWxsKCdjaXJjbGUnKVxuICAgICAgLmRhdGEoZnVuY3Rpb24oZCl7IHJldHVybiBkLmRhdGFwb2ludHMgfSlcbiAgICAgIC5lbnRlcigpXG4gICAgICAuYXBwZW5kKCdjaXJjbGUnKVxuICAgICAgLy8gQWRkIHVuaXF1ZSBjbGFzcyB0byBoaWRlL3Nob3cgb24gaG92ZXJcbiAgICAgIC5hdHRyKCdjbGFzcycsIGZ1bmN0aW9uKGRkKXtyZXR1cm4gJ2NpcmNsZS0nICsgZGQuZGF0ZX0pXG4gICAgICAuYXR0cigncicsIDIpXG4gICAgICAuYXR0cignY3gnLCBmdW5jdGlvbihkZCl7cmV0dXJuIHhTY2FsZShkZC5kYXRlKX0pXG4gICAgICAuYXR0cignY3knLCBmdW5jdGlvbihkZCl7cmV0dXJuIHlTY2FsZShkZC5jb25jZW50cmF0aW9uKX0pXG4gICAgICAuYXR0cignZmlsbCcsIGZ1bmN0aW9uKGQpIHtyZXR1cm4gY29sb3IoZC5jYXRlZ29yeSk7IH0pXG4gICAgICAuc3R5bGUoJ3N0cm9rZScsIGZ1bmN0aW9uKGQpIHtyZXR1cm4gY29sb3IoZC5jYXRlZ29yeSk7IH0pXG4gICAgICAuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xuXG59XG5cblxuXG4vLyBEZWZpbmUgcmVzcG9uc2l2ZSBiZWhhdmlvclxuZnVuY3Rpb24gcmVzaXplICgpIHtcbiAgLy8gUmVzaXplIGNoYXJ0XG4gIHZhciBjaGFydENvbnRhaW5lcldpZHRoID0gcGFyc2VJbnQoZDMuc2VsZWN0KCcuY2hhcnQtaW5mbycpLnN0eWxlKCd3aWR0aCcpKSAqIC44M1xuICBkMy5zZWxlY3RBbGwoJyNjaGFydCcpLnRyYW5zaXRpb24oKVxuICAgICAgLnN0eWxlKCd3aWR0aCcsIGNoYXJ0Q29udGFpbmVyV2lkdGgpXG4gICAgICAuZHVyYXRpb24oMTAwKVxuICAgICAgLmRlbGF5KDIwMClcbiAgICAgIC5vbignZW5kJywgYWRqdXN0ICk7XG59XG5cbi8vIEFkZGp1c3QgR3JhcGhcbmZ1bmN0aW9uIGFkanVzdCgpIHtcbiAgLy8gR2V0IHRoZSBuZXcgc2l6ZVxuICB3aWR0aCA9IHBhcnNlSW50KGQzLnNlbGVjdCgnI2NoYXJ0Jykuc3R5bGUoJ3dpZHRoJykpIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7XG4gIGhlaWdodCA9IHBhcnNlSW50KGQzLnNlbGVjdCgnI2NoYXJ0Jykuc3R5bGUoJ2hlaWdodCcpKSAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tO1xuXG4gIC8vIFVwZGF0ZSB0aGUgcmFuZ2Ugb2YgdGhlIHNjYWxlIHdpdGggbmV3IHdpZHRoL2hlaWdodCBhbmQgdGhlIHRpY2tzaXplIGdhcFxuICB4U2NhbGUucmFuZ2UoWzAsIHdpZHRoXSk7XG4gIHlTY2FsZS5yYW5nZShbaGVpZ2h0LCAwXSk7XG5cbiAgeUF4aXMudGlja1NpemUoLXdpZHRoLCAwLCAwKTtcblxuICAvLyBVcGRhdGUgdGhlIGF4aXMgYW5kIHRleHQgd2l0aCB0aGUgbmV3IHNjYWxlXG4gIHN2Zy5zZWxlY3QoJy54LmF4aXMnKVxuICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDAsJyArIGhlaWdodCArICcpJylcbiAgICAuY2FsbCh4QXhpcyk7XG5cbiAgc3ZnLnNlbGVjdCgnLnkuYXhpcycpXG4gICAgLmNhbGwoeUF4aXMpO1xuXG4gIC8vIEZvcmNlIEQzIHRvIHJlY2FsY3VsYXRlIGFuZCB1cGRhdGUgdGhlIGxpbmVcbiAgc3ZnLnNlbGVjdEFsbCgnLmxpbmUnKVxuICAgIC5hdHRyKCdkJywgZnVuY3Rpb24oZCkgeyByZXR1cm4gbGluZShkLmRhdGFwb2ludHMpOyB9KTtcblxuICAvLyBVcGRhdGUgY2lyY2xlIHBvaW50XG4gIHN2Zy5zZWxlY3RBbGwoJ2NpcmNsZScpXG4gICAgICAuYXR0cignY3gnLCBmdW5jdGlvbihkZCl7cmV0dXJuIHhTY2FsZShkZC5kYXRlKX0pXG4gICAgICAuYXR0cignY3knLCBmdW5jdGlvbihkZCl7cmV0dXJuIHlTY2FsZShkZC5jb25jZW50cmF0aW9uKX0pO1xuXG4gIC8vIFVwZGF0ZSBSZWN0YW5nbGUgZm9yIG1vdXNlIGV2ZW50XG4gIHN2Zy5zZWxlY3RBbGwoJ3JlY3QnKVxuICAgICAgLmF0dHIoJ3dpZHRoJywgd2lkdGgpXG4gICAgICAuYXR0cignaGVpZ2h0JywgaGVpZ2h0KTtcblxuICAvLyBVcGRhdGUgdGhlIHRpY2sgbWFya3NcbiAgeEF4aXMudGlja3MoTWF0aC5mbG9vcihNYXRoLm1heCh3aWR0aC82NSwgNCkpKTtcbiAgeUF4aXMudGlja3MoTWF0aC5mbG9vcihNYXRoLm1heChoZWlnaHQvMzAsIDQpKSk7XG5cbn07XG5cblxuLy8gQ2FsbCB0aGUgcmVzaXplIGZ1bmN0aW9uIHdoZW5ldmVyIGEgcmVzaXplIGV2ZW50IG9jY3Vyc1xuZDMuc2VsZWN0KHdpbmRvdykub24oJ3Jlc2l6ZScsICByZXNpemUgKTtcblxuLy8gQ2FsbCB0aGUgcmVzaXplIGZ1bmN0aW9uXG5hZGp1c3QoKTsiXSwiZmlsZSI6ImFzc2V0cy9qcy9tYWluLmpzIn0=
