function drawGraph(){xScale.domain(d3.extent(data,function(t){return t[xLabel]})),yScale.domain([d3.min(concentrations,function(t){return d3.min(t.datapoints,function(t){return t.concentration})}),d3.max(concentrations,function(t){return d3.max(t.datapoints,function(t){return t.concentration})})]),svg.append("g").attr("class","x axis").attr("transform","translate(0,"+height+")").call(xAxis).selectAll("text").attr("y",10),svg.append("g").attr("class","y axis").transition().duration(500).call(yAxis).on("end",function(){d3.select(this).append("text").attr("class","label").attr("y",-10).attr("fill","#333333").style("text-anchor","end").text("Production")}),svg.selectAll(".y.axis text").attr("dy",-4),tooltipLine=svg.append("line"),tipBox=svg.append("rect").attr("width",width).attr("height",height).attr("opacity",0).on("mousemove",drawTooltip).on("mouseout",removeTooltip);(categoryLine=svg.selectAll(".category").data(concentrations).enter().append("g").attr("class","category")).append("path").attr("class","line").attr("d",function(t){return line(t.datapoints)}).attr("stroke-width","2px").attr("fill","none").attr("stroke",function(t){return color(t.category)}).on("mouseover",function(t){d3.select(this).style("stroke-width","3px")}).on("mousemove",drawTooltip).on("mouseout",function(){d3.select(this).style("stroke-width","2px")}).each(function(t){t.totalLength=this.getTotalLength()}).attr("stroke-dasharray",function(t){return t.totalLength+" "+t.totalLength}).attr("stroke-dashoffset",function(t){return t.totalLength}).transition().duration(500).attr("stroke-dashoffset",0),categoryLine.append("g").selectAll("circle").data(function(t){return t.datapoints}).enter().append("circle").attr("class",function(t){return"circle-"+t.date}).attr("r",2).attr("cx",function(t){return xScale(t.date)}).attr("cy",function(t){return yScale(t.concentration)}).attr("fill",function(t){return color(t.category)}).style("stroke",function(t){return color(t.category)}).style("display","none")}function resize(){var t=.83*parseInt(d3.select(".chart-info").style("width"));d3.selectAll("#chart").transition().style("width",t).duration(100).delay(200).on("end",adjust)}function adjust(){width=parseInt(d3.select("#chart").style("width"))-margin.left-margin.right,height=parseInt(d3.select("#chart").style("height"))-margin.top-margin.bottom,xScale.range([0,width]),yScale.range([height,0]),yAxis.tickSize(-width,0,0),svg.select(".x.axis").attr("transform","translate(0,"+height+")").call(xAxis),svg.select(".y.axis").call(yAxis),svg.selectAll(".line").attr("d",function(t){return line(t.datapoints)}),svg.selectAll("circle").attr("cx",function(t){return xScale(t.date)}).attr("cy",function(t){return yScale(t.concentration)}),svg.selectAll("rect").attr("width",width).attr("height",height),xAxis.ticks(Math.floor(Math.max(width/65,4))),yAxis.ticks(Math.floor(Math.max(height/30,4)))}var categories,xLabel,data,categoryLine,tipBox,concentrations,tooltipLine,margin={top:20,right:20,bottom:30,left:50},width=parseInt(d3.select("#chart").style("width"))-margin.left-margin.right,height=parseInt(d3.select("#chart").style("height"))-margin.top-margin.bottom,yMax=28e3,xScale=d3.scaleLinear().range([0,width]),yScale=d3.scaleLinear().range([height,0]),color=d3.scaleOrdinal().range(["#FABE9C","#F6AB9A","#FED47D"]),xAxis=d3.axisBottom(xScale).tickFormat(d3.format("d")),yAxis=d3.axisLeft(yScale).tickSize(width).tickSize(-width,0,0),line=d3.line().curve(d3.curveBasis).x(function(t){return xScale(t.date)}).y(function(t){return yScale(t.concentration)}),totalHeight=height+margin.top+margin.bottom,svg=d3.select("#chart").style("width",width+margin.left+margin.right).style("height",totalHeight).append("g").attr("transform","translate("+margin.left+","+margin.top+")"),tooltip=d3.select("#tooltip"),removeTooltip=function(){tooltip&&tooltip.style("display","none"),tooltipLine&&tooltipLine.attr("stroke","none"),d3.selectAll("circle").style("display","none")},drawTooltip=function(){var t=xScale.invert(d3.mouse(tipBox.node())[0]),e=Math.floor(t),a={};concentrations.forEach(function(t){var n=_.find(t.datapoints,{date:""+e});n&&(a[t.category]=n)}),d3.selectAll("circle").style("display","none"),d3.selectAll(".circle-"+e).style("display","block");var n=parseInt(d3.select(".chart-info").style("height"))-height-margin.top-margin.bottom+d3.mouse(this)[1];tooltipLine.attr("stroke","#bdbdbd").attr("x1",xScale(e)).attr("x2",xScale(e)).attr("y1",0).attr("y2",height),tooltip.html("<div>"+e+"</div>").style("display","block").style("font-weight","bold").style("left",d3.mouse(tipBox.node())[0]+margin.left+margin.right+"px").style("top",n+"px"),tooltip.append("ul").attr("class","legends-list"),_.each(a,function(t,e){if(!t.isDisabled){var a="<div class='title inline-b'>"+e+"</div> <div class='desc inline-b'>"+t.concentration+"</div>";tooltip.select("ul").append("li").attr("class","col-4").style("color",function(t){return color(e)}).html(a)}})},sortCategoryLegend=function(){categories.map(function(t,e){legends.append("li").attr("class","col-4 "+(t.isDisabled?"exclude":"")).style("color",function(e){return color(t.name)}).html("<span class='default-color'>"+t.name+"</span>").on("click",function(e){t.isDisabled=!t.isDisabled,categories=_.sortBy(categories,[function(t){return t.isDisabled}]),legends.html(""),sortCategoryLegend(),concentrations=categories.map(function(t,e){if(!t.isDisabled)return{category:t.name,datapoints:data.map(function(e){return{date:e[xLabel],concentration:+e[t.name]}})}}),concentrations=_.compact(concentrations),svg.html(""),drawGraph()})})},legends=d3.select("#legends ul");d3.csv("./assets/data/milledRiceEndingStocks.csv",function(t,e){if(t)throw t;data=e,xLabel=d3.keys(data[0])[0],categories=d3.keys(data[0]).slice(1),color.domain(categories),concentrations=categories.map(function(t,e){return categories[e]={name:t,isDisabled:!1},legends.html(""),sortCategoryLegend(),{category:t,datapoints:data.map(function(e){return{date:e[xLabel],concentration:+e[t]}})}}),drawGraph()}),d3.select(window).on("resize",resize),adjust();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
